// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

#pragma warning disable
namespace Turms.AcceptanceTest
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MessageFixingFeature : Xunit.IClassFixture<MessageFixingFeature.FixtureData>,
        System.IDisposable
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;

        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;

#line 1 "MessageFixing.feature"
#line hidden

        public MessageFixingFeature(MessageFixingFeature.FixtureData fixtureData,
            Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }

        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(
                new System.Globalization.CultureInfo("en-US"), "MessageFixing",
                "\tIn order to process invalid messages\r\n\tAs an interface engineer\r\n\tI want to fix " +
                "errors in the messages", ProgrammingLanguage.CSharp, ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        public virtual void TestInitialize()
        {
        }

        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(
                _testOutputHelper);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }

        [Xunit.FactAttribute(DisplayName =
            "Parsing HL7 messages with invalid line breaks succeeds after fixing the message")]
        [Xunit.TraitAttribute("FeatureTitle", "MessageFixing")]
        [Xunit.TraitAttribute("Description",
            "Parsing HL7 messages with invalid line breaks succeeds after fixing the message")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void ParsingHL7MessagesWithInvalidLineBreaksSucceedsAfterFixingTheMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(
                "Parsing HL7 messages with invalid line breaks succeeds after fixing the message", new string[]
                {
                    "mytag"
                });
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I have a message with a line break in the middle of a segment", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 9
            testRunner.When("I fix the message", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 10
            testRunner.Then("the fixed message can be parsed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Xunit.FactAttribute(DisplayName = "Parsing HL7 messages with invalid line breaks without fixing fails")]
        [Xunit.TraitAttribute("FeatureTitle", "MessageFixing")]
        [Xunit.TraitAttribute("Description", "Parsing HL7 messages with invalid line breaks without fixing fails")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void ParsingHL7MessagesWithInvalidLineBreaksWithoutFixingFails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(
                "Parsing HL7 messages with invalid line breaks without fixing fails", new string[]
                {
                    "mytag"
                });
#line 13
            this.ScenarioSetup(scenarioInfo);
#line 14
            testRunner.Given("I have a message with a line break in the middle of a segment", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 15
            testRunner.Then("the fixed message cannot be parsed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            public FixtureData()
            {
                MessageFixingFeature.FeatureSetup();
            }

            void System.IDisposable.Dispose()
            {
                MessageFixingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore

#endregion